## https://app.code2flow.com/
# General frontend workflow

OmniMentor Frontend;
start:
Starting the session;
if(auto-logon?) {
  verify the account by telegram-id;
} else {
  prompt of email or student_id;
  if(email entered?) 
    retrieve student_id;
  verify account by student_id;  
}
if(blocked?) {
  Inform blocked user;
  goto end;
}
if(learner mode) {
  live update student records;
  welcome message; 
  while(learner service?)
    process learner's request;
}
else {
  faculty/mentor menu;
  while(admin service?) 
    process admin function;
}
end:
logout;
goto start;
done;


# Learner frontend workflow
Learner frontend workflow;
display welcome message and menu;
while(options selected is not logout?) {
  if (**My Courses**)
    show list of related courses;
  if (**Schedule**)
    show the course calendar;
  if (**Chart**)
    plot and show the score chart;
  if (**Contact me**)
    send a message to mentor;
  if (**LiveChat**)
    connect to live chat;
  if (**FAQ**)
    show a list of questions;
  if (**Info**)
    display relevant info;
  if (**Auto Sign-In**) 
    if (activate?) 
      activate;
    else if (deactivate?) 
      deactivate;
  else
    NLP chat;
}
logout;
done;

# Faculty frontend workflow;
Faculty frontend workflow;
display menu;
while(options selected is not logout?) {
  if (**Faculty Admin**)
    display Faculty Admin menu;
  if (**Playbooks**)
    display Playbooks menu;
  if (**Analysis**)
    display Analysis menu;
  if (**Manage Users**)
    display Manage Users menu;
  if (**Chat**)
    display Chat menu;
  if (**System Admin**)
    display System Admin menu;
  if (Auto Sign-In selected) 
    if (activate?) 
      activate;
    else if (deactivate?) 
      deactivate;
}
logout;
done;

# Faculty Admin Menu
Faculty Admin workflow;
display menu;
while(following options selected?) {
  if (**Schedule Update**)
    perform schedule update;
  if (**LMS Import**)
    perform LMS Import;
  if (**Mentor Import**)
    perform mentor import;
}
back to main menu;
done;

# Playbooks Menu
Playbooks workflow;
display menu;
while(any options selected?) {
  if (**Configurator Playbooks**) {
    list out all related course info;
  }
  else if (**Persona Playbooks**) {
    prompt for course_id;
    display playbook menu;
    while(next option selected?) {
      if(**Learners List**)
        display user data;
      if(**Learner's Progress**)
        display learners progress;
      if(**Schedule**)
        display course schedule;
      if(**MCQ Pending**)
        display MCQ pending listing;
      if(**MCQ Failed**)
        display MCQ failed listing;
      if(**Assignment Pending**)
        display Assignment pending listing;
      if(**Assignment Failed**)
        display Assignment failed listing;
    }
  }
  else if (**Learners at risk**) {
    prompt for course_id;
    display report for selected course_id;
  }
}
done;

# Analysis Menu
Analysis workflow;
prompt for course_id;
display menu;
while(any options selected?) {
  if (**AI Grading**) {
    list out all related course info;
  }
  else if (**MCQ Analysis**) {
    Assignment & MCQ Score Summary;
    MCQ Grouping for current course_id;
    Assignment Grouping for current course_id;
  }
  else if (**MCQ Difficulty Analysis**) {
    display MCQ Diff menu;
    while(next option selected?) {
      if(**By MCQ Attempts**)
        MCQ Analysis Difficulty By MCQ Attempts;
      if(**By MCQ Scores**)
        MCQ Analysis Difficulty By MCQ Scores;
      if(**By MCQ Average**)
	prompt MCQ Question;
        MCQ Analysis Difficulty By MCQ Average on selected question;
    }
  }
  else if (**Graph**) {
    display bar plot for selected course_id;
  }
}
done;

# Manage Users Menu
prompt for course_id;
display menu;
while(any options selected?) {
  if (**Name Search**)
    list out name matched users;
  else if (**Email Search**)
    list out email matched users;    
  else if (**Reset User**) {
    display menu;
    while(next option selected?) {
      if (**Block this user**)
        set UserType to 0;
      else if (**Set as admin**)
        set UserType to 11;
      else if (**Set as learner**)
        set UserType to 1;
      else if (**Change Email**)
        update email address;
      else if (**Reset Binding**)
        set Binded to 0;
    }
  }
  else if (**Active Users**)
    list out online users;
  else if (**Binded Users**)
    list out binded users;
  else if (**Blocked Users**)
    list out blocked users;
  }
done;

# System Admin Menu
display System Admin menu;
while(any options selected?) {
  if (**NLP**)
    display NLP menu;
  else if (**ML**)
    display ML menu;
  else if (**Clients**)
    display Clients menu;
  else if (**SysConf**)
    reload the system configuration without restart the bot;
  }
go back to Mentor menu;
done;

# NLP Menu
display NLP menu;
while(any options selected?) {
  if (**Dictionary**)
    table export for dictionary object;
  else if (**Bot Prompts**)
    table export for prompts object;
  else if (**Corpus**)
    table export for ft_corpus object;
  else if (**Responses**)
    table export for responses object;
  else if (**Train NLP**)
    Re-train the NLP model;
  else if (**Stopwords**)
    table export for stopwords object;
  else if (**FAQ List**)
    table export for faq object;
  }
go back to System Admin menu;
done;

# ML Menu
display ML menu;
while(any options selected?) {
  if (**Model Data**)
    table export for mcqas_info object;
  else if (**ML Pipeline**)
    generate data for machine learning;
  else if (**ML EDA**)
    generate data profpler report;
  else if (**ML Graph**)
    plot model chart;
  else if (**Train Model**)
    Re-train the machine learning model;
  }
go back to System Admin menu;
done;

# Clients Menu
display Clients menu;
while(any options selected?) {
  if (**Client Copy**)
    copy data from source client to target client;
  else if (**Client Delete**)
    delete data for the select client;
  else if (**Reload Config**)
    reload the client specific configuration without restart the bot;
  }
go back to System Admin menu;
done;

# Reminder notification workflow
begin auto_notify;
prepare relevant T-1 course_list;
prepare relevant user list;
while(course_id in course_list) {
  prepare mcq list and assignment list;
  while(student_id in course_id) {
    if(mcq pending or assignment pending)
      if(binded user)
        send reminder msg to student;
        if(failed to send)
          add to list of failed-to-remind;
        else
          add to list of send-successful;
      else
        add to list of failed-to-remind
  }
  send summary of reminder message to mentor with the 2 lists;
}
inform upon completion of reminder msg;
done;

# Intervention notification workflow
begin auto_intervent;
prepare relevant active course_list;
prepare relevant user list;
while(course_id in course_list) {	
  if((soc is true) and ((eoc is false)
    or (eoc within grace period)) {
    get related learners score data;
    get related user master;
    }
  else
    skip this course_id;
  filter away non-learners;
  while(student_id in course_id) {
    verify student_progress;
    if(not-in-progress)
      if(binded user)
        send intervention msg to student;
        if(failed to send)
          add to list of failed-to-intervene;
        else
          add to list of send-successful;
      else
        add to list of failed-to-intervene;
        
    if(eoc is true and reached duedate)        
      send email to course admin;
  }
  send summary of intervention message to mentor with the 2 lists;
}
inform upon completion of intervention msg;
done;

# vmbotlib.load_edxdata
build course_list for eoc = 0;
while (course_id in course_list) {
  compute eoc and eoc_grace;
  if(course is active or eoc within eoc_grace) {
    perform update_mcq;
    perform update_assignment;
    perform update_schedule;
    add into updated_courses;
  }
  update playbooks table on eoc status;
}
new_course_list = list of new courses yet to import;
while (course_id in new_course_list)
  perform edx_import;
perform mass_update_usermaster;  
done;
  
# vmedxlib.update_mcq
given course_id;
get mcq score data from rest api;
if (data available)
  update table mcq_data;
perform aggregation on mcq scores;   
if (aggregated data available)  
  update table mcq_score;
transform aggregated data by student_id into userdata format;
update table userdata by student_id;

# vmedxlib.update_assignment
given course_id;
get grading, assignment data from rest api;
perform aggregation on grading, scores, attempts;   
transform aggregated data by student_id into userdata format;
update table userdata by student_id;

# vmedxlib.update_schedule
given course_id;
get google calendar data from rest api;
compute stage_list from calendar data;
perform update_stage_table using stage_list;
compute stagedate using startdate and num_of_days;
update stages table on startdate,stagedate;
update IU column of stages table based on stages_master;
compute stage_by_schdule and update userdata table;
initialised null values on stagedate, startdate from stage table;
initialised null values on mcq_zero, mcq_failed,as_zero, as_failed from userdata table;
done;

# vmedxlib.edx_import
given course_id;
compute module_code,module_id;
get course_name from rest api;
compute eoc;
update playbooks;
if (records not found in stages table)
  update stages table using stages_master;
read LMS data using rest api;
transform and update into userdata;
initialised mcq and assignment fields;
if (mcq and assignment has data) {
  perform update_assignment;
  perform update_mcq;
}  
perform update_schedule;
done;

# vmbotlib.analyze_cohort
Start MCQ Analysis;
given course_id;
load userdata;
aggregate mcq and assignment scores by student_id;

if(mcq_score >= 70%)
  summary_report("70% and above");
else if(mcq_score >= 30%)
  summary_report("Between 30% and 70%");
else
  summary_report("Below 30%");

if(mcq_attemps >=2)
  summary_report("2 or more attempts");

if(assignment_score >= 70%)
  summary_report("70% and above");
else if(assignment_score >= 30%)
  summary_report("Between 30% and 70%");
else
  summary_report("Below 30%");
done;

# vmbotlib.display_progress
perform load_progress;
if(status is incomplete) or
  (status is not ready) or 
  (status is EOC)
  exit;
if(mcqas_complete 
and avg_score >= pass_rate)
  inform "We noticed that 
  your progress is as per schedule.
  Well Done! Keep good work.";
if(f2f_error is True)
  if(pm_stage is True)
    inform "We noticed that 
    you have not attended Face to Face ......";
  else
    if(attendance_rate >= 75%)
      inform "We noticed that 
      you have not attended Face to Face.......";      
    else
      inform "We noticed that 
      you have not attended Face to Face.....
      and not reached 75% of attendance.....";"
if(mcq_zero>0 
and avg_score=0)
  inform "We noticed that you have not started and/or 
  attempted any of the eLearning nor the MCQs";
if(mcqas_list>0 
and avg_score < pass_rate 
and max_attempts < 4)
  inform "We noticed that 
  you have not score above 70%";
if(mcq_zero>0)
  inform "We noticed that 
    you have not started or attempted MCQ.....";
if(as_zero>0)
  inform "You have not attempted Assignment.....";
done;  

# vmbotlib.load_progress
given student_id, course_info;
compute course_id,
  stagebyschedule,
  stage_list,
  startdate_list,
  duedate_list;
compute mcq_duedate, 
assignment_duedate,
elearning_duedate,
flipclass_duedate, pm_stage;
load stage_list,
mcq_list, 
assignment_list,
numofdays_per_stage 
from stage table;
get attendance_missing_datelist 
from rest api;
while(stage in stage_list)
  check attendance;
  perform get_stageinfo;
  compute att_rate, 
  pass_stage, 
  risk_level;
  update stage_info, 
  stagebyprogress;
  determine stage_progress;  
if(stagebyschedule = EOC 
and pass_stageis True
and att_rate >= 75%)
  inform "_eoc_";
else
  inform stagebyprogress;
if(pm_stage is True
and att_rate < 75%)
  risk_level set to 3;
update userdata table;
update internal variable vars;
done;

# vmbotlib.get_stageinfo
given stagecode, mcq and assignment info, pass_rate, fee_amt;
perform evaluate_progress with mcq_info,
   mcq_required_pertaining_to_stage;
perform evaluate_progress with assignment_info,
   assignment_req_pertaining_to_stage;
compute avg_score,  max_mcq_attempts, mcq_as_completed, 
  ma_list, mcq_pending, assignment_pending;
pass_stage = False;
if(stage = SOC and fee_amt = 0)
  pass_stage = True;
if( (mcq_as_completed is True) and (avg_score >= pass_rate))
  pass_stage = True;
if(stage = EOC)
  pass_stage = (fee_amt is zero ?);
risk_level = 0;
if(mcq_pending or assignment_pending)
  risk_level=1;
if(avg_score < pass_rate and max_mcq_attempts<4)
  risk_level=2;
if(avg_score < pass_rate and avg_score>0)
  risk_level=2;
if(mcq_pending and avg_score=0)
  risk_level=3;
if(fee_amt>0)
  pass_stage = False;
done;

# vmbotlib.evaluate_progress
given score_data, iu_list, passing_rate, mcq_assignment_type;
compute iu_attempts,iu_score,score_pass,score_zero,score_failed;
compute score_avg as total_score 
from iu_score over counts of iu_score;
transform score_data into score_pass with score beyond passing_rate;
transform score_data into score_zero 
with score equals to zero;
transform score_data into score_failed 
with score below passing_rate and is not zero;
show mcq_assignment_type," average test score : ",score_avg with 2 decimal points;
show mcq_assignment_type," test passed : ",listing from score_pass;
show mcq_assignment_type," test failed : ",listing from score_failed;
show mcq_assignment_type," test pending : ",listing from score_zero;
compute attempts_balance;
done;

# vmbotlib.verify_student
given student_id,userdata,stage_data, course_id;
create vars using userdata;
get student_name, learner_stage from userdata;
Inform user on learner_stage;
prepare stage_list, date_list;
get assistance_email and mentor_email;
save above results into vars;
done;

